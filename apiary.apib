FORMAT: 1A

# DokoDoko
DokoDoko API is a *mobile application* where you share your location with your friends so that you join for a good time.











# Group Users
Users related user of the **DokoDoko API**


## Users Collection [/users]
### List all user [POST]
+ Request (application/json)

        { 
            "id" : 1, 
            "sessionKey": "anjobsj7dnd58aeo1wd35coguteoamrj" 
        }
        
+ Response 200 (application/json)

        [
            {   
                "id": 1,
                "lastName": "Dupont",
                "firstName": "Jean",
                "birthDate": -303955200000,
                "city": "Paris",
                "country": "France",
                "phone": "0600010203",
                "email": "jean.dupont@aol.fr",
                "registerDate": 1414242910342
            }, 
            {   
                "id": 2,
                "lastName": "Durand",
                "firstName": "Marcel",
                "birthDate": -309448600000,
                "city": "Versaille",
                "country": "France",
                "phone": "0600010205",
                "email": "marcel.durand@club-internet.fr",
                "registerDate": 1414242910348}
        ]

+ Response 401 (application/json)

        [
            { 
                "error_code": 1, 
                "error": "User with this sessionKey not found." 
            },
            { 
                "error_code": 2,
                "error": "The session has expired." 
            }
        ]





### Create a User [PUT]
+ Request (application/json)

        { 
            "firstName": "Jean", 
            "lastName": "Dupont", 
            "city": "Paris", 
            "country": "France", 
            "birthDate": "1960-05-15", 
            "phone": "0600010203", 
            "email": "jean.dupont@aol.fr", 
            "password": "azerty" 
        }

+ Response 201 (application/json)

        {}
        
+ Response 409 (application/json)
    
        [
            {
                "error_code": 1, 
                "error": "Email already exists" 
            },
            { 
                "error_code": 2,
                "error": "Phone already exists" 
            }
        ] 















## User [/user/]
A single user object with all its details


### Retrieve a User [POST]
+ Request (application/json)

        [
            {
                "id" : 1,
                "user" :
                {
                    "id" : 1, 
                    "sessionKey": "rtljzthmgekohbjfaqjcl9djmudmsepo" 
                }
            },
            {
                "email" : "jean.dupont@aol.fr",
                "user" :
                {
                    "id" : 1, 
                    "sessionKey": "rtljzthmgekohbjfaqjcl9djmudmsepo" 
                }
            },
            {
                "phone" : "0600010203",
                "user" :
                {
                    "id" : 1, 
                    "sessionKey": "rtljzthmgekohbjfaqjcl9djmudmsepo" 
                }
            },
        ]
        
+ Response 200 (application/json)

    + Header

            X-My-Header: The Value

    + Body
        
            {
                "id": 1,
                "lastName": "Dupont",
                "firstName": "Jean",
                "birthDate": -303955200000,
                "city": "Paris",
                "country": "France",
                "phone": "0600010203",
                "email": "jean.dupont@aol.fr",
                "registerDate": 1414242910342
            }
 

+ Response 401 (application/json)

        [
            { 
                "error_code": 1, 
                "error": "User with this sessionKey not found." 
            },
            { 
                "error_code": 2,
                "error": "The session has expired." 
            }
        ]
 
 
 
 
 



## User [/user/login/]
Log the user to the application and retrive is sessionKey.

### Login a User [POST]
+ Request (application/json)

        [
            { 
                "email": "jean.dupont@aol.fr",
                "password": "azerty" 
            },
            { 
                "phone": "0600010203", 
                "password": "azerty" 
            }
        ]

+ Response 200 (application/json)

    + Header

            X-My-Header: The Value

    + Body
    
            { 
                "id" : 1, 
                "sessionKey" : "afcgggv54czgvegre" 
            }
            
+ Response 401 (application/json)

    + Body
    
            [
                { 
                    "error_code": 1, 
                    "error": "Incorrect username" 
                },
                { 
                    "error_code": 2, 
                    "error": "Incorrect password" 
                }
            ]
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
## User [/user/verifyKey/]
Verify the key of the User. This is an info not an endpoint.

### Verify the Key of an User [POST]
+ Request (application/json)

        { 
            "id" : 1, 
            "sessionKey": "8vh4eceml7z3b2tbwiwvgj42i46rnc7r" 
        }
        
+ Response 200 (application/json)

        [ 
            true, 
            false 
        ]

+ Response 401 (application/json)

        [
            { 
                "error_code": 1, 
                "error": "User with this sessionKey not found." 
            },
            { 
                "error_code": 2,
                "error": "The session has expired." 
            }
        ]

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
            
## User [/user/logout/]
Logout the user.

### Disconnect a User [POST]
+ Request (application/json)

        { 
            "id" : 1, 
            "sessionKey": "8vh4eceml7z3b2tbwiwvgj42i46rnc7r" 
        }
        
+ Response 200 (application/json)

        {}

+ Response 401 (application/json)

        [
            { 
                "error_code": 1, 
                "error": "User with this sessionKey not found." 
            },
            { 
                "error_code": 2, 
                "error": "The session has expired." 
            }
        ]













## User [/user/forgetPassword/]
Not implemented

###ForgetPassword [POST]
+ Request (application/json)

+ Response 200 (application/json)

        {}
        
+ Response 400 (application/json)
















## User [/user/updateProfile/]
Update the profile of an User.

### Update Profile [POST]
+ Request (application/json)

        { 
            "id": 1,
            "sessionKey": "8vh4eceml7z3b2tbwiwvgj42i46rnc7r",
            "city": "Paris", 
            "country": "France", 
            "phone": "0600010203", 
            "email": "jean.dupont@aol.fr", 
            "password": "azerty" 
        }

+ Response 200 (application/json)

        {}

+ Response 401 (application/json)

        [
            { 
                "error_code": 1, 
                "error": "User with this sessionKey not found." 
            },
            { 
                "error_code": 2, 
                "error": "The session has expired." 
            }
        ]








































# Group Dokos
Dokos related doko of the **DokoDoko API**







## Dokos Collection [/dokos/all]
### List all doko [POST]
+ Request (application/json)

        { 
            "id" : 1, 
            "sessionKey": "anjobsj7dnd58aeo1wd35coguteoamrj" 
        }
        
+ Response 200 (application/json)

        [
            {
                "id": 1,
                "latitude": 48.856614,
                "longitude": 2.3522219,
                "userId": 1,
                "date": 1414258311572,
                "text": "Avec des potes.",
                "picture": null
            },
            {
                "id": 2,
                "latitude": 1.856614,
                "longitude": 50.3522219,
                "userId": 1,
                "date": 1414258327303,
                "text": null,
                "picture": null
            }
        ]
 
+ Response 401 (application/json)

        [
            { 
                "error_code": 1, 
                "error": "User with this sessionKey not found." 
            },
            { 
                "error_code": 2,
                "error": "The session has expired." 
            }
        ]
 
 
 
 
 



## Doko Create [/dokos/]

### Create a Doko [PUT]
+ Request (application/json)

        {
            "sessionKey" : "0qaj0z84vdxjgfsewnn6o0ox4otyzzzi",
            "doko" : {
                "userId": 1,
                "latitude": 48.856614,
                "longitude": 2.3522219,
                "text": "Avec des potes.",
                "picture": "byte[]"
            }
        }
        
+ Response 201 (application/json)

        {}

+ Response 400 (application/json)

        { 
            "error_code": 3, 
            "error": "Invalid argument" 
        }
 
         
+ Response 401 (application/json)

        [
            { 
                "error_code": 1, 
                "error": "User with this sessionKey not found." 
            },
            { 
                "error_code": 2,
                "error": "The session has expired." 
            }
        ]
 
 





### List Doko By scope & Group [POST]
+ Request (application/json)

        {
            "sessionKey" : "0qaj0z84vdxjgfsewnn6o0ox4otyzzzi",
            "distance" : 15,
            "doko" : {
                "userId": 1,
                "latitude": 48.856614,
                "longitude": 2.3522219
            }
        }
        
+ Response 200 (application/json)

        [
            {
                "id": 1,
                "latitude": 48.856614,
                "longitude": 2.3522219,
                "userId": 1,
                "date": 1414258311572,
                "text": "Avec des potes.",
                "picture": null
            }
        ]
 
+ Response 400 (application/json)

        { 
            "error_code": 3, 
            "error": "Invalid argument" 
        }
        
+ Response 401 (application/json)

        [
            { 
                "error_code": 1, 
                "error": "User with this sessionKey not found." 
            },
            { 
                "error_code": 2,
                "error": "The session has expired." 
            }
        ]
 
 



































# Group Groups
Groups related groups of the **DokoDoko API**


## Groups Collection  [/groups]
### List all groups [POST]
+ Request (application/json)

        { 
            "id" : 1, 
            "sessionKey": "anjobsj7dnd58aeo1wd35coguteoamrj" 
        }

+ Response 200 (application/json)

        [
            {
                nameGroup: "superGroup1",
                users:
                [
                    {"pseudo":"titi"},
                    {"pseudo":"tata"}
                ]
            },
            {
                nameGroup: "superGroup2",
                users:
                [
                    {"pseudo" :"paul"},
                    {"pseudo":"darkvador"}
                ]
            }
        ]

    
### Create a group [PUT]
+ Request (application/json)

        {
            "sessionKey": "afcgggv54czgvegre", 
            "groupName":"superGroup"
        }
    
+ Response 201 (application/json) 

         { statut: true}
        
+ Response 400 (application/json) 

          { "error_code": 1, "error": "This group already exists." }



## Group  [/groups/{groupName}]
A single Group object with all its all friends
+ Parameters
    + groupName (required, string, `"superGroup"`) ... String  groupName.

### Retrieve a Group [GET]
+ Response 200 (application/json)

    + Header

            X-My-Header: The Value

    + Body

            { "groupName": superGroup, [{"pseudo" :"titi}{"pseudo":"tata"}]}


### Delete a group [POST]
+ Request (application/json)

        {"sessionKey": "agjci456gcg65fxq46", "groupName":"superGroup" }
        
+ Response 201 (application/json)
        
        { statut: true}
+   Response 400 (application/json)

         { "error_code": 1, "error": "User with this sessionKey not found." }
         
+   Response 400 (application/json) 
       
         {"error_code": 2, "error": "You don't have the right to delete this group." }

+   Response 400 (application/json)

         {"error_code": 3, "error": "This group does not exist." }





## Group [/group/{groupName}/addFiend/]


### Add friend in group [POST]

+ Request (application/json)
        
        {"sessionKey": "agjci456gcg65fxq46", "friendId":"42", "groupName":"superGroup" }

+   Response 201 (application/json)

        { statut: true}
        
+   Response 400 (application/json)

         { "error_code": 1, "error": "User with this sessionKey not found." }
         
+   Response 400 (application/json)

         {"error_code": 2, "error": "This group does not exist." }         
         
+   Response 400 (application/json)

         { "error_code": 3, "error": "this user does not exist." }
         
         
   
   
   
   
         
## Group [/group/acceptFriendRequest/]


### accept friend request [POST]

+   Request (application/json)
        
        {"sessionKey": "agjci456gcg65fxq46", "requestID":"23", "accept":"true" , "groupName":"superGroup"}

+   Response 201 (application/json)

        { statut: true}
        
+   Response 400 (application/json)

         { "error_code": 1, "error": "User with this sessionKey not found." }
         
+   Response 400 (application/json)

         { "error_code": 2, "error": "this requestID doesn't found." }
         
+   Response 400 (application/json)

         {"error_code": 3, "error": "This group doesn't exist." }         
 
 
 
 
 
         
## Group [/group/{groupName}/deleteFriend/]


### delete friend  [DELETE]

+   Request (application/json)
        
        {"sessionKey": "agjci456gcg65fxq46", "friendId":"42"}

+   Response 201 (application/json)

        { statut: true}
        
+   Response 400 (application/json)

         { "error_code": 1, "error": "User with this sessionKey not found." }
         
+   Response 400 (application/json)

         { "error_code": 2, "error": "This user doesn't found." }
         
+   Response 400 (application/json)

         {"error_code": 3, "error": "This group doesn't exist." }         

         
         